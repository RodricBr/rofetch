#!/usr/bin/env bash

# Main variables

export LANG=C.UTF-8

MSG_=$(curl -s "https://type.fit/api/quotes" 2>/dev/null | jq '.[] | [.text]' | grep -e '"' | sort -R | head -n1)
CHECK_VM_=$(X_=$(systemd-detect-virt); echo ${X_^})

# Color variables

VERME="\033[1;31m"
VERME2="\033[0;31m"
VERDE="\033[1;32m"
ROXO="\033[1;95m"
FIM="\033[0;00m"

# Functions

function HELP_ {
  echo -e "\nUsage: ${0##*/} OPTIONS\n\n\
  Flags:\n\
    -h | --help          :: Shows this help message.\n\
    -b | --banner string :: Set custom ascii banner.\n\
    -d | --debug         :: Runs the program with bash's debug mode.\n\
                            Debug flag must be the last.\n\
                            Usage: ./program.sh -b banner.png -d\n"
  exit 0
}

function VERSION_ {
  echo -e "\nVersion: 2.1\n\
  Updated IPv4 grepping, typos, term output, fixed errors found\n\
  within other systems and cleaned the code a little bit.\n\
  \nVersion: 2.2\n\
  Added bash's debug mode just for fun."
  exit 0
}

function DEBUG_ {
  echo -e "\n${VERME2}Modo debug está ativado.${FIM}\n"
  set -x
}

[[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]&& HELP_
[[ "$1" == "-v" ]] || [[ "$1" == "--version" ]] && VERSION_
[[ "${@: -1}" == "-d" ]] || [[ "${@: -1}" == "--debug" ]]&& DEBUG_

# Reading the file for the banner

ARQ_="$2"
case "$ARQ_" in
  "-b"|"--banner") : ;;
  "") [[ -f "r.txt" ]]&& printf "File \"r.txt\" set as default\n" && ARQ_="r.txt" || printf "${VERME2}Default banner file was not found!${FIM}\n" ;;
esac

IFS=$'\n' read -d '' -r -a lines < "$ARQ_"

# Main

echo -e "\n${VERME2}${lines[0]}"
echo -e "${lines[1]}  ${VERDE}$USER${FIM}@${VERDE}$HOSTNAME${FIM}"
echo -e "${VERME2}${lines[2]}"
echo -e "${lines[3]}  ${VERME}OS${FIM}:\t\t\t $(grep -Eo '["\x22].*["\x22]' <<< $(grep -e "DESCRIPTION" /etc/lsb-release) | tr -d '"') ($CHECK_VM_)"
echo -e "${VERME2}${lines[4]}  ${VERME}Term & Font${FIM}:\t\t $(echo -ne "$TERM ($(tty))") / ($(grep -Eo '["\x22].*["\x22]' /etc/default/console-setup | sed -n '4,1p' | tr -d '"'""))"
echo -e "${VERME2}${lines[5]}  ${VERME}IPv4 (Local)${FIM}:\t $([[ ! "$(ping -c 1 comptia.org | grep -Po "\d{1,4}\.\d{1,4}\.\d{1,4}\.\d{1,4}" -m 1)" ]]&& echo -e "${VERME}(Disconnected)${FIM}" || echo -e "$(hostname -I)${VERDE}(Connected)${FIM}")")"
echo -e "${VERME2}${lines[6]}  ${VERME}Kernel${FIM}:\t\t $(uname -smr)"
echo -e "${VERME2}${lines[7]}  ${VERME}Uptime${FIM}:\t\t $(uptime -p | sed 's/up //g')"
echo -e "${VERME2}${lines[8]}  $(free -m | awk 'NR==2{printf "\033[1;31mMemory Usage\033[0m: \t %s / %sMiB (%.2f%%)\n", $3,$2,$3*100/$2 }')"
echo -e "${VERME2}${lines[9]}  ${VERME}Shell${FIM}:\t\t $(VERR_=$($SHELL --version); echo ${VERR_%%(*})"
echo -e "${VERME2}${lines[10]}  $([[ "$DESKTOP_SESSION" == "" ]]&& echo -e "${VERME}DE${FIM}:\t\t\t No DE / Unknown" || echo -e "${VERME}DE${FIM}:\t\t\t $XDG_CURRENT_DESKTOP $DESKTOP_SESSION")"
echo -e "${VERME2}${lines[11]}"
echo -e "${lines[12]}${ROXO}${MSG_//\"}${FIM}"
unset MSG_ VERME VERME2 VERDE ROXO FIM CHECK_VM_
exit 0

# Default "R" banner

"DEFAULT" <<EOF
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⠿⠿⠟⠛⠛⠛⠋⠉⠉⠉⠉⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿
⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿
⣿⣿⠀⠀⠀⠀⣿⣿⣿⣿⣿⣷⣶⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿
⣿⣿⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿
⣿⣿⡇⠀⠀⠀⠘⠛⠛⠛⠛⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿
⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿
⣿⣿⡇⠀⠀⠀⣶⣶⣆⠀⠀⠀⠲⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⡇⠀⠀⠀⢹⣿⣿⣆⠀⠀⠀⠈⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣇⠀⠀⠀⠘⣿⣿⣿⣧⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⠀⠀⠀⠀⢻⣿⣿⣿⣧⡀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿
⣿⣿⣿⣀⣀⡀⠀⠈⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿
EOF

# Testing: test/rofetch-opt.sh
