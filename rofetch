#!/usr/bin/env bash


# Color variables
VERME="\033[1;31m"
VERME2="\033[0;31m"
VERDE="\033[1;32m"
ROXO="\033[1;95m"
FIM="\033[0;00m"


# Checking if dependencies are installed in the first execution:
function CHECK_DEP {
  local DEPEN_="ip free uname awk grep cut tr ps curl jq"

  printf "${ROXO}+ First execution, checking for ${FIM}${VERDE}Rofetch${ROXO} dependencies...${FIM}\n"
  for CMD_ in DEPEN_; do
    if command -v "$CMD_" >/dev/null 2>&1; then
      printf "[Error]: Missing dependency $CMD_\n"
      exit 2
    fi
  done
  # Creating marker file after first execution
  touch "$MARKER_FILE"
}

# Checking for marker file's existence:
MARKER_FILE="/tmp/.rofetch-first-execution"
[ ! -f "$MARKER_FILE" ]&& CHECK_DEP


# Checking if debug option is set:
if [[ "${@: -1}" == "-d" ]] || [[ "${@: -1}" == "--debug" ]]; then
  DEBUG_=true
  set -x
else
  DEBUG_=false
fi


# Option flag functions:
# Help message (-h/--help)
function HELP_ {
  echo -e "\nUsage: ${0##*/} [OPTION] [-d]\n\n\
  Options:\n\
    -h | --help                  :: Shows this help message.\n\
    -b | --banner /path/to/file  :: Set custom ASCII art banner. Must be no more than 15 lines.\n\
    -d | --debug                 :: Runs the program with bash's debug mode.\n\
                                    Debug flag MUST be the last argument!\n\
                                    Example: ./rofetch -b ascii.txt -d\n\
  Description:\n\
  Rofetch is a command line interface system information tool inspired by neofetch\n\
  written fully in bash script. Its main purpose is to be fast, reliable and clean.\n\
  Rofetch displays information next to a default \"R\" ASCII art but the art can also\n\
  be modified by a file containing your ASCII art of choice using the \"-b/--banner\" option.\n\
  The file needs to have no more than 15 lines otherwise it'll be cut off.\n\


  Improvements ideas and bug reports are welcome and can be solicited at:\n\
  https://github.com/dylanaraps/neofetch/issues\n\
  "
  exit 0
}

# Version message (-v/--version)
function VERSION_ {
  echo -e "\nVersion: 3.2\n\
  + Added more compability for Debian based distros & UNIX/POSIX systems.\n\
  + Detect VM and DE/WM are more dynamic.\n\
  + \"r.txt\" file with default banner is no longer needed.\n\
  Rofetch can now be executed in any location of your system.\n\
  + Rewrote the whole code and made it more legible for programmers.\n\
  + Checks for dependencies on the first execution.\n\
  Marker file \".rofetch-first-execution\" will be created in \"/tmp/\" directory.\n\
  - Inspiration quotes variable was commented out and will be a WIP for now\n\
  since it's been consuming a little bit too much of user execution time.\n\
  "
  exit 0
}


# Calling the help or version function if flags are being called
[[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]&& HELP_
[[ "$1" == "-v" ]] || [[ "$1" == "--version" ]] && VERSION_


# Other variables:
export LANG=C.UTF-8
# Quotes (previous quotes api is no longer available)
#MSG_=$(
#curl -s "https://dummyjson.com/quotes" | jq -r '
#  .quotes as $q |
#  ($q | length) as $len |
#  $q[(now | tonumber * 1000 | floor % $len)] |
#  "\(.quote) — \(.author)"
#'
#)
#CHECK_VM_=$(X_=$(systemd-detect-virt); echo ${X_^})


# Main Functions:
# Checks if user is running on a standardize system or not
function OS_DETECT_FUNC {
  if [[ ! -f "/etc/lsb-release" ]]; then
    # slower: grep "PRETTY_" /etc/os-release | cut -d "=" -f2 | tr -d '"'
    awk -F= '/^PRETTY_NAME=/ { gsub(/"/, "", $2); print $2 }' /etc/os-release
  else
    # slower: grep -e "DESCRIPTION" /etc/lsb-release | cut -d "=" -f2 | tr -d '"'
    awk -F= '/DESCRIPTION/ { gsub(/"/, "", $2); print $2 }' /etc/lsb-release
  fi
}

# Fetching font name
function FONT_FUNC {
  # slower: echo -ne "$TERM ($(tty))) / ($(grep "FONTFACE" /etc/default/console-setup | cut -d "=" -f2 | tr -d '"'))"
  echo -ne "$TERM ($(tty)) / ($(awk -F= '/^FONTFACE=/ { gsub(/"/, "", $2); print $2 }' /etc/default/console-setup))"
}

# Fetching local ipv4 address and checking if the user has access to the internet
function IPV4_FUNC {
  local IP_CMD=$(ip route get 1.1.1.1 | awk '{for(i=1;i<=NF;i++) if ($i=="src") print $(i+1)}')
  if ! ping -W 2 -c 1 8.8.8.8 &>/dev/null; then
    printf "$IP_CMD ${VERME}(Disconnected)${FIM}"
  else
    printf "$IP_CMD ${VERDE}(Connected)${FIM}"
  fi
}

# Fetching kernel information
function KERNEL_FUNC {
  uname -smr
}

# Fetching up-time
function UPTIME_FUNC {
  echo "$(awk '{print int($1/3600)" hours "int(($1%3600)/60)" minutes"}' /proc/uptime)"
}

# Fetching amount of packages installed using dpkg
function PACK_AMOUNT {
  dpkg -l | grep -c '^ii'
}

# Fetching user's memory usage information
function MEMUSE_FUNC {
  free -m | awk 'NR==2{printf "\033[1;31mMemory Usage\033[0m: \t %s / %sMiB (%.2f%%)\n", $3,$2,$3*100/$2 }'
}

# Fetching shell name and version
function SHELL_FUNC {
  VERR_=$($SHELL --version); echo ${VERR_%%(*}
  # Matches only before the "("
}

# Fetching DE Name
function CHECK_VM {
  # Trying /sys/class/dmi/id if available
  if [[ -r /sys/class/dmi/id/sys_vendor && -r /sys/class/dmi/id/product_name ]]; then
    vendor=$(< /sys/class/dmi/id/sys_vendor)
    product=$(< /sys/class/dmi/id/product_name)

    if [[ "$vendor" == "innotek GmbH" && "$product" == "VirtualBox" ]]; then
      version=""
      if [[ -r /sys/class/dmi/id/product_version ]]; then
        version=$(< /sys/class/dmi/id/product_version)
      fi
      printf "VirtualBox $version"
      return
    fi

    case "$vendor" in
      "Microsoft Corporation") [[ "$product" == "Virtual Machine" ]] && printf "Hyper-V" && return ;;
      "VMware, Inc.") printf "VMware" && return ;;
      "QEMU") printf "QEMU/KVM" && return ;;
    esac
  fi

  # Checking if the user is running on WSL1/2
  if grep -qi microsoft /proc/version 2>/dev/null; then
    if grep -qEi 'wsl.*2' /proc/version; then
      printf "WSL2"
    else
      printf "WSL1"
    fi
    return
  fi

  # Fallback: systemd-detect-virt
  if command -v systemd-detect-virt &> /dev/null; then
    virt_type=$(systemd-detect-virt)
    if [[ "$virt_type" != "none" ]]; then
      printf "$virt_type"
      return
    fi
  fi

  printf "Unknown"
}


function DE_WM_FUNC {
  local DE_ WM_

  # Detect DE using environment variables
  if [[ "$XDG_CURRENT_DESKTOP" ]]; then
    DE_="$XDG_CURRENT_DESKTOP"
  elif [[ "$DESKTOP_SESSION" ]]; then
    DE_="$DESKTOP_SESSION"
  elif [[ "$GNOME_DESKTOP_SESSION_ID" ]]; then
    DE_="GNOME"
  elif [[ "$KDE_FULL_SESSION" == "true" ]]; then
    DE_="KDE"
  else
    DE_="Unknown DE"
  fi

    # Detect WM using running processes
    # Use pgrep for common WMs, ordered by likelihood
  local WM_LIST=(
    "mutter" "kwin" "xfwm4" "openbox" "i3" "bspwm" "awesome"
    "xmonad" "marco" "fluxbox" "icewm" "enlightenment" "compiz" "herbstluftwm"
    )

  for candidate in "${WM_LIST[@]}"; do
    if pgrep -x "$candidate" > /dev/null; then
      WM_="$candidate"
      break
    fi
  done

  if [[ -z "$WM_" ]]; then
    WM_="Unknown WM"
  fi

  echo "$DE_ / $WM_"
}

# Banner functionality:
# If banner flag is set by the user, read banner file and store into an array
function READ_BANNER_FUNC {
  lines=()
  while IFS= read -r line; do
    lines+=("$line")
  done < "$1"
}

# Reading banner file from second argument
ARQ_="$2"

# Checking if the banner flag is set
if [[ "$1" == "-b" || "$1" == "--banner" ]]; then
  # if a custom banner file is defined...
  if [[ -f "$ARQ_" ]]; then
    READ_BANNER_FUNC "$ARQ_"
  else
    if [[ -f "$ARQ_" ]]; then
      printf "${VERME2}[Error]:${FIM} Banner file \"$ARQ_\" was not found!\nQuitting...\n"
      exit 1
    else
      printf "${VERME2}[Error]:${FIM} Banner option requires an existing file as argument!\nQuitting...\n"
      exit 1
    fi
  fi
else
  # If no banner flag is set, this shall be the default ascii art:
  lines=(
    "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
    "⣿⣿⣿⠿⠿⠟⠛⠛⠛⠋⠉⠉⠉⠉⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿"
    "⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿"
    "⣿⣿⠀⠀⠀⠀⣿⣿⣿⣿⣿⣷⣶⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿"
    "⣿⣿⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿"
    "⣿⣿⡇⠀⠀⠀⠘⠛⠛⠛⠛⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿"
    "⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿"
    "⣿⣿⡇⠀⠀⠀⣶⣶⣆⠀⠀⠀⠲⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
    "⣿⣿⡇⠀⠀⠀⢹⣿⣿⣆⠀⠀⠀⠈⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
    "⣿⣿⣇⠀⠀⠀⠘⣿⣿⣿⣧⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿"
    "⣿⣿⣿⠀⠀⠀⠀⢻⣿⣿⣿⣧⡀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿"
    "⣿⣿⣿⣀⣀⡀⠀⠈⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿"
    "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿"
  )
fi

# Debug mode will look for each line of the banner file too
if $DEBUG_; then
  for line in "${lines[@]}"; do
    printf "$line"
  done
fi


# Main structure:
echo -e "\n${VERME2}${lines[0]}"
echo -e "${lines[1]}  ${VERDE}$USER${FIM}@${VERDE}$HOSTNAME${FIM}"
echo -e "${VERME2}${lines[2]}"
echo -e "${lines[3]}  ${VERME}OS${FIM}:\t\t\t $(OS_DETECT_FUNC) ($(CHECK_VM))"
echo -e "${VERME2}${lines[4]}  ${VERME}Terminal & Font${FIM}:\t $(FONT_FUNC)"
echo -e "${VERME2}${lines[5]}  ${VERME}IPv4 (Local)${FIM}:\t $(IPV4_FUNC)"
echo -e "${VERME2}${lines[6]}  ${VERME}Kernel${FIM}:\t\t $(KERNEL_FUNC)"
echo -e "${VERME2}${lines[7]}  ${VERME}Uptime${FIM}:\t\t $(UPTIME_FUNC)"
echo -e "${VERME2}${lines[8]}  $(MEMUSE_FUNC)"
echo -e "${VERME2}${lines[9]}  ${VERME}Packages${FIM}:\t\t $(PACK_AMOUNT)"
echo -e "${VERME2}${lines[10]}  ${VERME}Shell${FIM}:\t\t $(SHELL_FUNC)"
echo -e "${VERME2}${lines[11]}  ${VERME}DE & WM${FIM}:\t\t $(DE_WM_FUNC)"
echo -e "${VERME2}${lines[12]}${FIM}"
echo -e "${VERME2}${lines[13]}  ${ROXO}${MSG_//\"}${FIM}"
echo -e "${VERME2}${lines[14]}${FIM}"

unset MSG_ VERME VERME2 VERDE ROXO FIM CHECK_VM_
exit 0
